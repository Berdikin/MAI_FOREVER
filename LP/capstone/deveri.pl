parents('Тимофей Бердикин','Алексей Бердикин','Екатерина Грынина').
parents('Иван Бердикин','Алексей Бердикин','Екатерина Грынина').
parents('Наталья Грынина','Валерий Грынин','Эмилия Мальченко').
parents('Екатерина Грынина','Валерий Грынин','Эмилия Мальченко').
parents('Алексей Бердикин','Сергей Бердикин','Галина Батова').
parents('Галина Батова','Михаил Батов','Нина Колесова').
parents('Анастасия Колесова','Порфирий Колесов','Василиса Колпакова').
parents('Мария Колесова','Порфирий Колесов','Василиса Колпакова').
parents('Нина Колесова','Порфирий Колесов','Василиса Колпакова').
parents('Александр Колесов','Порфирий Колесов','Василиса Колпакова').
parents('Иван Колесов','Порфирий Колесов','Василиса Колпакова').
parents('Людмила Симонова','Василий Симонов','Анастасия Колесова').
parents('Василий Симонов','Людмила Симонова Симонов','Мария Колесова').
parents('Степан Симонов','Людмила Симонова Симонов','Мария Колесова').
parents('Александр Базанов','Сергей Базанов','Клавдия Голубева').
parents('Виктор Симонов','Степан Симонов','Клавдия Голубева').
parents('Клавдия Голубева','Алексей Голубев','Прасковья Неизвестно').
parents('Прасковья Неизвестно','Демьян Неизвестно','Прасковья Неизвестно').
parents('Сергей Самсонов','Константин Самсонов','Наталья Грынина').
parents('Ольга Самсонова','Константин Самсонов','Наталья Грынина').
parents('Алексей Самсонов','Неизвестно Самсонов','Наталья Грынина').
parents('Константин Самсонов','Неизвестно Самсонов','Наталья Грынина').
parents('Александра Самсонова','Алексей Самсонов','Надежда Неизвестно').
parents('Егор Самсонов','Алексей Самсонов','Надежда Неизвестно').
parents('Надежда Самсонова','Сергей Самсонов','Маргарита Неизвестно').
parents('Эмилия Мальченко','Петр Мальченко','Рива Беленькая').
%-------------------------------------------------------------------

%Деверь(не путать с дверью) - это брат мужа.
%Задача: найти все двери, тьфу, всех деверей.

%-------------------------------------------------------------------

%Определяем список дочерей (отсюда: parents(Имя_Фамилия, _, _)
doughter(['Наталья Грынина', 'Екатерина Грынина', 'Галина Батова', 'Анастасия Колесова',
          'Мария Колесова', 'Нина Колесова', 'Людмила Симонова', 'Клавдия Голубева',
          'Прасковья Неизвестно', 'Ольга Самсонова', 'Надежда Самсонова', 'Эмилия Мальченко']).

%-------------------------------------------------------------------

%Определяем поиск элемента из списка
find([First|_], First).
find([_|End_list], First):- find(End_list, First).

%-------------------------------------------------------------------

%Определяем предикат муж (M - man, W - woman)
husband(M, W) :- parents(_, M, W).

%-------------------------------------------------------------------

%Определяем предикат брат (X, Y - братья)
brother(X, Y) :- parents(X, M, W),
                 parents(Y, M, W),
                 not(X = Y),

                 %отсеивание сестер
                 doughter(Doughter_list),
                 not(find(Doughter_list, Y)).

%-------------------------------------------------------------------

%Определяем предикат деверь
dever([D, W]) :- husband(M, W),
                 brother(M, D).

%-------------------------------------------------------------------

%Определяем список всех отношений типа деверь,
%где отношение типа деверь - это список [Dever, Wife])
all_devers(Devers) :- findall(
                              Dever,
                              dever(Dever),
                              Devers
                              ).
%-------------------------------------------------------------------

%Предикат отсеивания дублей в передаваемом списке и вывод нового
churn([], []).
churn([First|End_list], Output) :- churn(End_list, New_list),
                                   not(find(End_list, First)),
                                   Output = [First | New_list].

churn([First|End_list], Output) :- churn(End_list, New_list),
                                   find(End_list, First),
                                   Output = New_list.


%-------------------------------------------------------------------

% Определяем итоговый список отношений типа деверь
dever_list(Dever_list) :- all_devers(Devers),
                          churn(Devers, Dever_list).

%-------------------------------------------------------------------

%Определяем предикат вывода всех деверей
output([]).
output([[D, W]|End_list]):- write("Для "),
                            write(W),
                            write(" деверем является "),
                            write(D),
                            nl,
                            output(End_list).

%-------------------------------------------------------------------

%Определяем итоговый предикат
who_is_dever() :- dever_list(Dever_list),
                  output(Dever_list).
