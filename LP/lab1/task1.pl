% Первая часть задания - предикаты работы со списками

% Реализация стандартных предикатов для списков

% Длина списка
% (список, длина)
my_length([], 0).
my_length([_|L], N):-my_length(L, N1), N is N1 + 1.

% Принадлежность элемента списку
% (элемент, список)
my_member(X, [X|_]).
my_member(X, [_|T]):-my_member(X, T).

% Слияние списков
% (список1, список2, список1+2)
my_append([], L, L).
my_append([X|T], L, [X|R]):-my_append(T, L, R).

% Удаление элемента из списка
% (элемент, список, список без элемента)
my_remove(A, [A|T], T).
my_remove(A, [B|T], [B|C]):-my_remove(A, T, C).

% Перестановки элементов в списке
% (список, перестановка)
my_permute([], []).
my_permute(L, [X|T]):-my_remove(X, L, R), my_permute(R, T).

% Подсписки списка
% (подсписок, список)
my_sublist(S, L):-my_append(_, R, L), my_append(S, _, R).

% Удаление последних трёх элементов списка
% (список, результат)
myremoveSTD_3(L, R):-append(R, X, L), X = [_,_,_].

% Удаление последних трёх элементов списка без стандартных предикатов
% (список, результат)
remove_kebab_3([_],[]) :- !.
remove_kebab_3([_,_],[]) :- !.
remove_kebab_3([_,_,_],[]) :- !.
remove_kebab_3([H|T],[H|Q]) :- remove_kebab_3(T,Q).


sum([], 0).
sum([H|T], S) :-sum(T, Tail), 
S = Tail + H.
% Нахождение среднего арифметического элементов списка
% (список, результат)
middle(L,A):-sum(L,S), 
length(L,K), 
A is S/K.
